// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movie_Api.Models;

#nullable disable

namespace Movie_Api.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    partial class MovieDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Movie_Api.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasAnnotation("SqlServer:ErrorMessage", "Please insert a unique name.");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Movies filled with action-packed scenes.",
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Movies intended to make the audience laugh.",
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Movies that focus on emotional themes.",
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Movies filled with adventurous journeys and exploration.",
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Movies based on historical events or settings.",
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Movies created using animation techniques.",
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Movies that explore speculative or futuristic concepts.",
                            Name = "Science Fiction"
                        });
                });

            modelBuilder.Entity("Movie_Api.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateOnly(2008, 7, 18),
                            Description = "A vigilante known as Batman sets out to combat the injustices of Gotham City.",
                            Duration = new TimeOnly(2, 32, 0),
                            ImagePath = "uploads\\movie1.jpg",
                            Rate = 9f,
                            Title = "The last stand"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateOnly(2010, 7, 16),
                            Description = "A thief who enters the dreams of others to steal secrets from their subconscious.",
                            Duration = new TimeOnly(2, 28, 0),
                            ImagePath = "uploads\\movie2.jpg",
                            Rate = 8.8f,
                            Title = "Spider man 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateOnly(1994, 10, 14),
                            Description = "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
                            Duration = new TimeOnly(2, 22, 0),
                            ImagePath = "uploads\\movie3.jpg",
                            Rate = 9.3f,
                            Title = "Spider man 3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateOnly(2008, 12, 25),
                            Description = "A group of German officers plot to assassinate Adolf Hitler during World War II.",
                            Duration = new TimeOnly(2, 1, 0),
                            ImagePath = "uploads\\movie4.jpg",
                            Rate = 8.1f,
                            Title = "valkyrie"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateOnly(2000, 5, 5),
                            Description = "A former Roman General sets out to exact vengeance against the corrupt emperor who murdered his family and sent him into slavery.",
                            Duration = new TimeOnly(2, 35, 0),
                            ImagePath = "uploads\\movie5.jpg",
                            Rate = 8.5f,
                            Title = "Gladiator"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateOnly(2002, 3, 15),
                            Description = "Set during the Ice Age, a sabertooth tiger, a sloth, and a wooly mammoth find a lost human infant, and they try to return him to his tribe.",
                            Duration = new TimeOnly(1, 21, 0),
                            ImagePath = "uploads\\movie6.jpg",
                            Rate = 7.5f,
                            Title = "Ice age"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateOnly(2007, 7, 3),
                            Description = "An ancient struggle between two Cybertronian races, the heroic Autobots and the evil Decepticons, comes to Earth, with a clue to the ultimate power held by a teenager.",
                            Duration = new TimeOnly(2, 24, 0),
                            ImagePath = "uploads\\movie7.jpg",
                            Rate = 7.1f,
                            Title = "Transformers"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateOnly(2000, 7, 14),
                            Description = "Two mutants come to a private academy for their kind whose resident superhero team must oppose a terrorist organization with similar powers.",
                            Duration = new TimeOnly(1, 44, 0),
                            ImagePath = "uploads\\movie8.jpg",
                            Rate = 7.4f,
                            Title = "X-men"
                        });
                });

            modelBuilder.Entity("Movie_Api.Models.MovieCategory", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MovieCategory");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            MovieId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            MovieId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            MovieId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            MovieId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            MovieId = 4,
                            CategoryId = 5
                        },
                        new
                        {
                            MovieId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            MovieId = 5,
                            CategoryId = 5
                        },
                        new
                        {
                            MovieId = 6,
                            CategoryId = 6
                        },
                        new
                        {
                            MovieId = 6,
                            CategoryId = 7
                        },
                        new
                        {
                            MovieId = 7,
                            CategoryId = 7
                        },
                        new
                        {
                            MovieId = 8,
                            CategoryId = 1
                        },
                        new
                        {
                            MovieId = 8,
                            CategoryId = 7
                        });
                });

            modelBuilder.Entity("Movie_Api.Models.MovieCategory", b =>
                {
                    b.HasOne("Movie_Api.Models.Category", "Category")
                        .WithMany("MovieCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie_Api.Models.Movie", "Movie")
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Movie_Api.Models.Category", b =>
                {
                    b.Navigation("MovieCategories");
                });

            modelBuilder.Entity("Movie_Api.Models.Movie", b =>
                {
                    b.Navigation("MovieCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
